// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using cafeManagement.Repository;

#nullable disable

namespace cafeManagement.Repository.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CafeManagement.Domain.Models.Admin", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("CafeManagement.Domain.Models.Menu", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RestorauntManagerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("id");

                    b.HasIndex("RestorauntManagerId")
                        .IsUnique();

                    b.ToTable("Menus");
                });

            modelBuilder.Entity("CafeManagement.Domain.Models.MenuItem", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("MenuId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("id");

                    b.HasIndex("MenuId");

                    b.ToTable("MenuItems");
                });

            modelBuilder.Entity("CafeManagement.Domain.Models.Order", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("OrderTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("TableId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("isPaid")
                        .HasColumnType("bit");

                    b.HasKey("id");

                    b.HasIndex("TableId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("CafeManagement.Domain.Models.OrderItem", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MenuItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("MenuItemId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("CafeManagement.Domain.Models.RestorauntManager", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Adminid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("Adminid");

                    b.ToTable("RestorauntManagers");
                });

            modelBuilder.Entity("CafeManagement.Domain.Models.Table", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RestorauntManagerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TableNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("WaiterId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("id");

                    b.HasIndex("RestorauntManagerId");

                    b.HasIndex("WaiterId");

                    b.ToTable("Tables");
                });

            modelBuilder.Entity("CafeManagement.Domain.Models.Waiter", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RestorauntManagerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("RestorauntManagerId");

                    b.ToTable("Waiters");
                });

            modelBuilder.Entity("MenuItemTable", b =>
                {
                    b.Property<Guid>("MenuItemsid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Tablesid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MenuItemsid", "Tablesid");

                    b.HasIndex("Tablesid");

                    b.ToTable("MenuItemTable");
                });

            modelBuilder.Entity("CafeManagement.Domain.Models.Menu", b =>
                {
                    b.HasOne("CafeManagement.Domain.Models.RestorauntManager", "RestorauntManager")
                        .WithOne("Menu")
                        .HasForeignKey("CafeManagement.Domain.Models.Menu", "RestorauntManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RestorauntManager");
                });

            modelBuilder.Entity("CafeManagement.Domain.Models.MenuItem", b =>
                {
                    b.HasOne("CafeManagement.Domain.Models.Menu", "Menu")
                        .WithMany("MenuItems")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Menu");
                });

            modelBuilder.Entity("CafeManagement.Domain.Models.Order", b =>
                {
                    b.HasOne("CafeManagement.Domain.Models.Table", "Table")
                        .WithMany()
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");
                });

            modelBuilder.Entity("CafeManagement.Domain.Models.OrderItem", b =>
                {
                    b.HasOne("CafeManagement.Domain.Models.MenuItem", "MenuItem")
                        .WithMany("OrderItems")
                        .HasForeignKey("MenuItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CafeManagement.Domain.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MenuItem");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("CafeManagement.Domain.Models.RestorauntManager", b =>
                {
                    b.HasOne("CafeManagement.Domain.Models.Admin", null)
                        .WithMany("RestorauntManagers")
                        .HasForeignKey("Adminid");
                });

            modelBuilder.Entity("CafeManagement.Domain.Models.Table", b =>
                {
                    b.HasOne("CafeManagement.Domain.Models.RestorauntManager", "RestorauntManager")
                        .WithMany("Tables")
                        .HasForeignKey("RestorauntManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CafeManagement.Domain.Models.Waiter", "Waiter")
                        .WithMany("Tables")
                        .HasForeignKey("WaiterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RestorauntManager");

                    b.Navigation("Waiter");
                });

            modelBuilder.Entity("CafeManagement.Domain.Models.Waiter", b =>
                {
                    b.HasOne("CafeManagement.Domain.Models.RestorauntManager", "RestorauntManager")
                        .WithMany("Waiters")
                        .HasForeignKey("RestorauntManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RestorauntManager");
                });

            modelBuilder.Entity("MenuItemTable", b =>
                {
                    b.HasOne("CafeManagement.Domain.Models.MenuItem", null)
                        .WithMany()
                        .HasForeignKey("MenuItemsid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CafeManagement.Domain.Models.Table", null)
                        .WithMany()
                        .HasForeignKey("Tablesid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CafeManagement.Domain.Models.Admin", b =>
                {
                    b.Navigation("RestorauntManagers");
                });

            modelBuilder.Entity("CafeManagement.Domain.Models.Menu", b =>
                {
                    b.Navigation("MenuItems");
                });

            modelBuilder.Entity("CafeManagement.Domain.Models.MenuItem", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("CafeManagement.Domain.Models.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("CafeManagement.Domain.Models.RestorauntManager", b =>
                {
                    b.Navigation("Menu");

                    b.Navigation("Tables");

                    b.Navigation("Waiters");
                });

            modelBuilder.Entity("CafeManagement.Domain.Models.Waiter", b =>
                {
                    b.Navigation("Tables");
                });
#pragma warning restore 612, 618
        }
    }
}
